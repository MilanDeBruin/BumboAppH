@using Bumbo.App.Web.Models.ViewModels.Dayoverview
@model List<DayOverviewViewModel>


@{
    var date = ViewData["Date"] != null
        ? (DateOnly)ViewData["Date"]
        : DateOnly.FromDateTime(DateTime.Today);

    var search = ViewData["Search"]?.ToString() ?? string.Empty;

}

<h1>Dagoverzicht - @date.ToShortDateString()</h1>
@{
    var selectedDate = (DateOnly)ViewData["Date"];
}

<div class="top-bar">
    <div class="date-selector-container">
        

        <form asp-controller="DayOverview" asp-action="Index" method="get" class="form-inline">
            <button type="submit" name="date" value="@selectedDate.AddDays(-1).ToString("yyyy-MM-dd")" class="btn btn-primary">Vorige Dag</button>
            <button type="submit" name="date" value="@selectedDate.AddDays(1).ToString("yyyy-MM-dd")" class="btn btn-primary">Volgende Dag</button>
            <input type="date" id="datePicker" name="date" value="@selectedDate.ToString("yyyy-MM-dd")" class="form-control mx-2" onchange="this.form.submit()" />
        </form>
    </div>

    <div class="search-container">
        <form asp-controller="DayOverview" asp-action="Index" method="get" class="form-inline search-form">
            <input type="hidden" name="date" value="@date.ToString("yyyy-MM-dd")" />
            <input type="text" name="search" value="@search" placeholder="Zoek op naam..." class="form-control search-input" />
            <button type="submit" class="btn btn-primary search-btn">Zoeken</button>
        </form>
    </div>
</div>

<form method="post" action="@Url.Action("Save", "DayOverview")">
    <input type="hidden" name="date" value="@date" />
    


    <table>
        <thead>
            <tr>
                <th>Voornaam</th>
                <th>Achternaam</th>
                <th>Geplande Uren</th>
                <th>Gewerkte Uren</th>
                <th>Verschil</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="employee-row"
                    data-shifts="@string.Join(", ",
        item.Shifts
        .Where(s => s.StartTime != "08:00" || s.EndTime != "08:00") 
        .Select(s => $"{s.StartTime} - {s.EndTime}"))">
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@TimeSpan.FromHours((double)item.PlannedHours).ToString(@"hh\:mm")</td>
                    <td>
                        <input type="time"
                               name="updatedHours[@Model.IndexOf(item)].WorkedHoursString"
                               value="@TimeSpan.Parse(item.WorkedHoursString).ToString(@"hh\:mm", System.Globalization.CultureInfo.InvariantCulture)"
                               class="worked-hours-input" />
                        <input type="hidden" name="updatedHours[@Model.IndexOf(item)].EmployeeId" value="@item.EmployeeId" />
                        <input type="hidden" name="updatedHours[@Model.IndexOf(item)].BranchId" value="@item.BranchId" />
                    </td>
                    <td>
                        @if (TimeSpan.TryParse(item.WorkedHoursString, out var workedTimeSpan))
                        {
                            var difference = workedTimeSpan - TimeSpan.FromHours((double)item.PlannedHours);
                            var sign = difference.TotalMinutes >= 0 ? "+" : "-";
                            @string.Format("{0}{1:hh\\:mm}", sign, difference.Duration())
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button type="submit">Opslaan</button>
</form>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("DOM Loaded");
        const rows = document.querySelectorAll(".employee-row");

        rows.forEach(row => {
            console.log("Row found:", row);
            row.addEventListener("mouseenter", function () {
                const shifts = row.getAttribute("data-shifts");
                console.log("Tooltip data:", shifts);
                
                if (shifts) {
                    showTooltip(row, shifts);
                }
            });
            
            row.addEventListener("mouseleave", function () {
                hideTooltip();
            });
        });

        function showTooltip(element, text) {
            let tooltip = document.querySelector(".custom-tooltip");

            // If tooltip doesn't exist, create it
            if (!tooltip) {
                tooltip = document.createElement("div");
                tooltip.className = "custom-tooltip";
                document.body.appendChild(tooltip);
            }

            tooltip.innerText = 'Diensten: ' + text;

            // Immediately position the tooltip relative to the element
            let rect = element.getBoundingClientRect();
            tooltip.style.left = rect.left + window.scrollX + 10 + "px";
            tooltip.style.top = rect.top + window.scrollY + 10 + "px";
            tooltip.style.display = "block";

            console.log(`Tooltip position: left=${tooltip.style.left}, top=${tooltip.style.top}`);

            // Update position dynamically on mousemove
            element.addEventListener("mousemove", function (e) {
                tooltip.style.left = e.pageX + 10 + "px";
                tooltip.style.top = e.pageY + 10 + "px";
            });
        }

        function hideTooltip() {
            
            let tooltip = document.querySelector(".custom-tooltip");
            if (tooltip) {
                tooltip.remove();
            }
        }
    });
</script>
<style>
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .custom-tooltip {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.8);
        color: #fff;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 14px;
        white-space: nowrap;
        z-index: 1000;
        pointer-events: none;
        display: block;
    }
    .date-selector-container {
        display: flex;
        align-items: center;
        gap: 10px; 
    }

    .search-container {
        display: flex;
        align-items: center;
    }

    .search-form {
        display: flex;
        align-items: center; 
        gap: 10px; 
    }

    .search-input {
        padding: 5px;
        font-size: 14px;
        width: 200px; 
    }

    .search-btn {
        padding: 5px 15px;
        font-size: 14px;
    }


    button {
        padding: 5px 15px;
        font-size: 14px;
    }

    input[type="date"] {
        padding: 5px;

    }

    table {
        margin-top: 20px;
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f4f4f4;

        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tr:hover {

        background-color: #f1f1f1;
    }

    .worked-hours-input {
        width: 80px;
    }
</style>

