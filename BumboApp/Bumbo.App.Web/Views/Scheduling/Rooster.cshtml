@using Bumbo.App.Web.Models.ViewModels;
@using Bumbo.App.Web.Models.ViewModels.Schedule;
@using BumboApp.Models.Models;
@using Bumbo.Domain.Enums;
@model IEnumerable<EmployeeScheduleViewModel>

<h2>Medewerker Roostering</h2>

<div class="filters-container">
    <div class="week-navigation-container">
        <button id="previousWeek" class="btn btn-secondary">Week Terug</button>
        <span id="weekRange"></span>
        <button id="nextWeek" class="btn btn-secondary">Week Vooruit</button>
    </div>

    <div class="function-filter-container">
        <label for="functionFilter">Filter op functie:</label>
        <select id="functionFilter" class="form-control" style="display:inline-block; width:auto;" onchange="filterEmployees()">
            <option value="all">Alle functies</option>
            @foreach (var functionName in Model.Select(e => e.MainFunction).Distinct())
            {
                <option value="@functionName">@functionName</option>
            }
        </select>
    </div>
</div>



<table class="schedule-table">
    <thead>
        <tr>
            <th>Employee</th>
            @foreach (var day in Enum.GetValues(typeof(DayNameOfWeek)).Cast<DayNameOfWeek>())
            {
                <th>
                    @day
                    <div class="summary-info">
                        @if (Model.FirstOrDefault()?.DailySummaries.TryGetValue(day, out var summary) ?? false)
                        {
                            <div>Forecast: <span class="forecast-hours">@summary.ForecastHours</span> hrs</div>
                            <div>Scheduled: <span class="scheduled-hours">@summary.ScheduledHours</span> hrs</div>
                            <div>Remaining: <span class="remaining-hours">@summary.RemainingHours</span> hrs</div>
                        }
                        else
                        {
                            <div>No data available</div>
                        }
                    </div>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in Model)
        {
            <tr>
                <td>@employee.Name</td>
                @foreach (var day in Enum.GetValues(typeof(DayNameOfWeek)).Cast<DayNameOfWeek>())
                {
                    <td class="schedule-cell" data-employee-id="@employee.EmployeeId">
                        <div id="schedule-container-@employee.EmployeeId-@day"></div>

                        <button class="btn btn-primary btn-sm" onclick="openScheduleModal(@employee.EmployeeId, '@day')">+</button>

                    </td>
                }
            </tr>
        }
    </tbody>
</table>
<div class="pagination-container">
    <button id="vorige" class="btn btn-secondary" onclick="changePage(-1)" disabled>Previous</button>
    <span id="pageInfo">Page 1</span>
    <button id="volgende" class="btn btn-secondary" onclick="changePage(1)">Next</button>
</div>
<!-- Modal -->
<div id="scheduleModal" class="modal" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Voeg een planning toe</h5>
                <button type="button" class="close" onclick="closeScheduleModal()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="scheduleForm">
                    <input type="hidden" id="modalEmployeeId">
                    <input type="hidden" id="modalDay">
                    <input type="hidden" id="modalDate">

                    <div class="form-group">
                        <label for="modalStartTime">Start tijd:</label>
                        <input type="time" id="modalStartTime" class="form-control" value="09:00">
                    </div>
                    <div class="form-group">
                        <label for="modalEndTime">Eind tijd:</label>
                        <input type="time" id="modalEndTime" class="form-control" value="21:00">
                    </div>
                    <div class="form-group">
                        <label for="modalDepartment">Afdeling:</label>
                        <select id="modalDepartment" class="form-control">
                            @foreach (var dept in Enum.GetValues(typeof(DepartmentEnum)))
                            {
                                <option value="@dept">@dept</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveSchedule()">Opslaan</button>
                <button type="button" class="btn btn-secondary" onclick="closeScheduleModal()">Annuleren</button>
            </div>
        </div>
    </div>
</div>
<div class="publish-container" style="position: fixed; bottom: 20px; right: 20px;">
    <button class="btn btn-primary" onclick="publishSchedules()">Publish</button>
</div>
@section Scripts {
    <script>
        function openScheduleModal(employeeId, day) {
            document.getElementById("modalEmployeeId").value = employeeId;
            document.getElementById("modalDay").value = day;
            document.getElementById("modalStartTime").value = "09:00";
            document.getElementById("modalEndTime").value = "21:00";
            document.getElementById("scheduleModal").style.display = "block";
        }
        function closeScheduleModal() {
            document.getElementById("scheduleModal").style.display = "none";
        }

        function saveSchedule() {
            const dayMapping = { 'Maandag': 0, 'Dinsdag': 1, 'Woensdag': 2, 'Donderdag': 3, 'Vrijdag': 4, 'Zaterdag': 5, 'Zondag': 6 };

            const employeeId = document.getElementById("modalEmployeeId").value;
            const day = document.getElementById("modalDay").value;
            
            const startTime = document.getElementById("modalStartTime").value;
            const endTime = document.getElementById("modalEndTime").value;
            const department = document.getElementById("modalDepartment").value;


            const start = parseTime(startTime);
            const end = parseTime(endTime);

            
            if (start >= end) {
                alert("Eind tijd moet later zijn dan start tijd.");
                return;
            }

            const baseDate = document.getElementById("modalDate").value;
            const dayOffset = dayMapping[day];
            const dateObj = new Date(baseDate);
            dateObj.setDate(dateObj.getDate() + dayOffset);

            updatedDate = dateObj.toISOString().split('T')[0]; 

            console.log(`Base Date: ${baseDate}, Day: ${day}, Updated Date: ${updatedDate}  ---------------------------------------`);
                
            
            console.log(`dag fix voor ding effe keeke wat voor type data hiermee wordt gestuurd zodat ik het als offset kan gebruiken: ${day}`)
            const scheduleEntry = {
                EmployeeId: parseInt(employeeId),
                Day: day,
                Date: new Date(updatedDate).toISOString(),  
                StartTime: startTime + ":00",     
                EndTime: endTime + ":00",
                Department: department
            };

            
            console.log("Schedule Entry:", scheduleEntry);

            $.ajax({
                url: '@Url.Action("AddSchedule", "Scheduling")',
                type: 'POST',
                data: JSON.stringify(scheduleEntry),
                contentType: 'application/json',
                success: function (response) {
                    console.log("Response from server:", response);

                    if (response.success) {
                        addScheduleToCell({
                            employeeId: scheduleEntry.EmployeeId,
                            day: scheduleEntry.Day,
                            date: scheduleEntry.Date,
                            startTime: scheduleEntry.StartTime.slice(0, 5),
                            endTime: scheduleEntry.EndTime.slice(0, 5),
                            department: scheduleEntry.Department
                        });

                        closeScheduleModal();
                    } else {

                        console.error("Failed to save schedule:", response.message);
                        alert(`Failed to save the schedule: ${response.message}`);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error saving schedule:", status, error);
                    alert("An unexpected error occurred. Please try again.");
                }
            });
        }
        function parseTime(timeStr) {
            const timeParts = timeStr.split(":");
            const hours = parseInt(timeParts[0], 10);
            const minutes = parseInt(timeParts[1], 10);
            return new Date(0, 0, 0, hours, minutes);
        }

        function publishSchedules() {
            const modalDate = document.getElementById("modalDate").value;

            if (!modalDate) {
                alert("No date selected for publishing schedules.");
                return;
            }

            const publishData = {
                Date: modalDate
            };

            console.log("Publishing schedules for date:", publishData);

            
            $.ajax({
                url: '@Url.Action("PublishSchedules", "Scheduling")',
                type: 'POST',
                data: JSON.stringify(publishData),
                contentType: 'application/json',
                success: function (response) {
                    alert("Schedules published successfully.");
                    console.log("Response from server:", response);
                },
                error: function (xhr, status, error) {
                    console.error("Error publishing schedules:", status, error);
                    alert("Failed to publish schedules. Please try again.");
                }
            });
        }

        function addScheduleToCell(schedule) {
            const containerId = `schedule-container-${schedule.employeeId}-${schedule.day}`;
            console.log("Looking for container with ID:", containerId);

            const container = document.getElementById(containerId);
            if (!container) {
                console.error(`Container not found for ID: ${containerId}`);
                return;
            }

            const scheduleElement = document.createElement("div");
            scheduleElement.classList.add("schedule-entry");

            const hiddenEmployeeId = document.createElement("input");
            hiddenEmployeeId.type = "hidden";
            hiddenEmployeeId.name = "employeeId";
            hiddenEmployeeId.value = schedule.employeeId;

            const hiddenDate = document.createElement("input");
            hiddenDate.type = "hidden";
            hiddenDate.name = "date";
            hiddenDate.value = schedule.date;

            const startTimeSpan = document.createElement("span");
            startTimeSpan.classList.add("startTime");
            startTimeSpan.textContent = schedule.startTime;

            const endTimeSpan = document.createElement("span");
            endTimeSpan.classList.add("endTime");
            endTimeSpan.textContent = schedule.endTime;

            const departmentSpan = document.createElement("span");
            departmentSpan.classList.add("department");
            departmentSpan.textContent = schedule.department;

            scheduleElement.innerHTML = `
                                <span class="startTime">${schedule.startTime}</span> -
                                <span class="endTime">${schedule.endTime}</span>
                                (<span class="department">${schedule.department}</span>)
                                <button class="btn btn-sm btn-danger" onclick="removeSchedule(this)">X</button>
                                `;

            scheduleElement.appendChild(hiddenEmployeeId);
            scheduleElement.appendChild(hiddenDate);
            container.appendChild(scheduleElement);
        }

        function removeSchedule(button) {
            const scheduleEntry = button.closest(".schedule-entry");

            console.log(scheduleEntry);

            const employeeIdInput = scheduleEntry.querySelector('input[name="employeeId"]');
            const dateInput = scheduleEntry.querySelector('input[name="date"]');
            const startTimeElement = scheduleEntry.querySelector(".startTime");
            const endTimeElement = scheduleEntry.querySelector(".endTime");
            const departmentElement = scheduleEntry.querySelector(".department");

            if (!employeeIdInput || !dateInput || !startTimeElement || !endTimeElement || !departmentElement) {
                console.error("Missing one or more required elements in the schedule entry");
                return;
            }

            const employeeId = employeeIdInput.value;
            const date = dateInput.value;
            const startTime = startTimeElement.textContent.trim();
            const endTime = endTimeElement.textContent.trim();
            const department = departmentElement.textContent.trim();

            console.log("Removing schedule:", { employeeId, date, startTime, endTime, department });

            const userConfirmed = confirm(`weet je zeker dat je deze wilt verwijderen? ${date} van ${startTime} tot ${endTime}?`);

            if (!userConfirmed) {
                console.log("Schedule removal canceled.");
                return; 
            }

            scheduleEntry.remove();

            const scheduleData = {
                EmployeeId: parseInt(employeeId),
                Date: new Date(date).toISOString(),
                StartTime: startTime + ":00",
                EndTime: endTime + ":00",
                Department: department
            };
            
            fetch('/Scheduling/RemoveSchedule', {  
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(scheduleData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to remove schedule");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("Schedule successfully removed from database");
                    } else {
                        console.error("Failed to remove schedule:", data);
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }


        function getWeekDates(year, week) {
            const jan1 = new Date(year, 0, 1);


            const jan1Day = jan1.getDay();

            const firstMonday = new Date(jan1);
            if (jan1Day !== 1) { 
                const offset = (jan1Day === 0 ? 1 : 8) - jan1Day;
                firstMonday.setDate(jan1.getDate() + offset);
            }

            const startDate = new Date(firstMonday);
            startDate.setDate(firstMonday.getDate() + (week - 1) * 7);

            const endDate = new Date(startDate);
            endDate.setDate(startDate.getDate() + 6);

            return { startDate, endDate };
        }
        

        document.addEventListener("DOMContentLoaded", function () {
            
            let currentDate = new Date();
            let currentYear = currentDate.getFullYear();

            function getCurrentWeek(date) {
                const jan1 = new Date(date.getFullYear(), 0, 1);
                const days = Math.floor((date - jan1) / (24 * 60 * 60 * 1000));
                return Math.ceil((days + jan1.getDay() + 1) / 7);
            }

            let currentWeek = getCurrentWeek(currentDate);

            
            function updateWeekRange() {
                const { startDate, endDate } = getWeekDates(currentYear, currentWeek);

                const rangeText = `Week ${currentWeek} of ${currentYear}: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
                document.getElementById("weekRange").textContent = rangeText;

                document.getElementById("modalDate").value = startDate.toISOString().split('T')[0];

                console.log("ik kom hier update week range")
                console.log(`hier is de start datum: ${startDate.toISOString().split('T')[0]}`)
                fetchSchedulesForWeek(currentYear, currentWeek);
            }

            function changeWeek(increment) {
                currentWeek += increment;

                if (currentWeek < 1) {
                    currentYear -= 1;
                    currentWeek = 52;
                } else if (currentWeek > 52) {
                    currentYear += 1;
                    currentWeek = 1;
                }

                updateWeekRange();
            }

            function fetchSchedulesForWeek(year, week) {

                $.ajax({
                    url: `@Url.Action("GetSchedulesForWeek", "Scheduling")?year=${year}&week=${week}`,
                    type: 'GET',
                    success: function (schedules) {
                        console.log(`fetch functie${schedules}`);
                                updateScheduleGrid(schedules);        
                    },
                    error: function (xhr, status, error) {
                        alert("Failed to fetch schedules. Please try again.");
                    }
                });
            }




            function updateScheduleGrid(data) {
                // Iterate over each employee in the data array
                data.forEach(employee => {
                    const schedules = employee.schedules || [];  // Default to empty array if schedules is undefined
                    const forecasts = employee.dailySummaries || {};  // Assuming forecasts are in dailySummaries

                    console.log(`Schedules for ${employee.name}:`, schedules); // Verify if the schedules are populated here

                    const dayMapping = {
                        0: 'Zondag', 1: 'Maandag', 2: 'Dinsdag', 3: 'Woensdag',
                        4: 'Donderdag', 5: 'Vrijdag', 6: 'Zaterdag'
                    };

                    // Clear existing schedule entries from schedule cells
                    document.querySelectorAll('.schedule-cell .schedule-entry').forEach(cell => cell.remove());

                    // Check if there are schedules for the current employee
                    if (schedules.length === 0) {
                        console.log(`No schedules available for ${employee.name}`);
                        return; // Stop further execution for this employee if no schedules
                    }

                    // Display schedules for the current employee
                    schedules.forEach(schedule => {
                        console.log("Processing schedule entry");

                        const scheduleDate = new Date(schedule.date);  // Assuming schedule.date is a valid date string
                        if (isNaN(scheduleDate)) {
                            console.error(`Invalid date format for schedule: ${schedule.date}`);
                            return; // Skip this schedule if the date is invalid
                        }

                        const dayOfWeek = scheduleDate.getDay(); // Get the day of the week (0 to 6)
                        const dayName = dayMapping[dayOfWeek] || "unknown";

                        const containerId = `schedule-container-${schedule.employeeId}-${dayName}`;
                        console.log(`Looking for container with ID: ${containerId}`);
                        const container = document.getElementById(containerId);

                        if (container) {
                            console.log(`Adding schedule entry`);

                            const scheduleElement = document.createElement("div");
                            scheduleElement.classList.add("schedule-entry");

                            scheduleElement.innerHTML = `
                            <span class="startTime">${schedule.startTime}</span> -
                            <span class="endTime">${schedule.endTime}</span>
                            (<span class="department">${schedule.department}</span>)
                            <button class="btn btn-sm btn-danger" onclick="removeSchedule(this)">X</button>
                        `;
                            container.appendChild(scheduleElement);
                        } else {
                            console.log(`Container with ID ${containerId} not found.`);
                        }
                    });

                    // Display forecasts for the current employee (if applicable)
                    for (const [dayName, summary] of Object.entries(forecasts)) {
                        const forecastCell = document.querySelector(`td.schedule-cell[data-day="${dayName}"]`);
                        if (forecastCell) {
                            forecastCell.insertAdjacentHTML('beforeend', `
                            <div class="forecast-data">
                                Forecast: ${summary.forecastHours} hours
                            </div>
                        `);
                        }
                    }
                });
            }



            document.getElementById("previousWeek").addEventListener("click", () => changeWeek(-1));
            document.getElementById("nextWeek").addEventListener("click", () => changeWeek(1));

            updateWeekRange();

            function filterEmployees() {
                const selectedFunction = document.getElementById('functionFilter').value.toLowerCase();
                const rows = document.querySelectorAll('.employee-row');

                rows.forEach(row => {
                    const employeeFunction = row.getAttribute('data-function').toLowerCase();
                    if (selectedFunction === 'all' || employeeFunction === selectedFunction) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            document.getElementById('functionFilter').addEventListener('change', filterEmployees);

            const rowsPerPage = 2;
            let currentPage = 1;
            const employeeRows = Array.from(document.querySelectorAll('.employee-row'));

            function renderPage(page) {
                return;
                const totalRows = employeeRows.length;
                const totalPages = Math.ceil(totalRows / rowsPerPage);

                
                document.getElementById("prevPage").disabled = page === 1;
                document.getElementById("nextPage").disabled = page === totalPages;

                
                document.getElementById("pageInfo").textContent = `Page ${page} of ${totalPages}`;

                
                employeeRows.forEach((row, index) => {
                    if (index >= (page - 1) * rowsPerPage && index < page * rowsPerPage) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            }

            
            window.changePage = function (increment) {
                currentPage += increment;
                renderPage(currentPage);
            };

            renderPage(currentPage);

            
        });

    </script>
}

<style>
    .schedule-entry {
        margin-bottom: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f8f9fa;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 3px;
    }

    .schedule-cell {
        vertical-align: top;
        padding: 10px;
    }

    .schedule-cell button {
        margin-top: 5px;
    }
    .schedule-entry button {
        margin-left: 10px;
        font-size: 0.8em;
    }

    .schedule-cell {
        cursor: pointer;
        vertical-align: top;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: #fff;
        padding: 20px;
        border-radius: 5px;
        width: 500px;
    }

    .close {
        float: right;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

     .close:hover {
        color: red;
     }

    .filters-container {
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .function-filter-container {
        margin-left: 20px;
    }

    .pagination-container {
        margin-top: 20px;
        display: flex;
        justify-content: start;
        align-items: start;
        gap: 10px;
    }

        .pagination-container button {
            min-width: 100px;
        }
</style>
