@using Bumbo.App.Web.Models.ViewModels;
@using BumboApp.Models.Models;
@using Bumbo.Domain.Enums;
@model IEnumerable<EmployeeScheduleViewModel>

<h2>Medewerker Roostering</h2>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</head>
<div class="filters-container">
    <div class="week-navigation-container">
        <button id="previousWeek" class="btn btn-secondary">Week Terug</button>
        <span id="weekRange"></span>
        <button id="nextWeek" class="btn btn-secondary">Week Vooruit</button>
    </div>

    <div class="function-filter-container">
        <label for="functionFilter">Filter op functie:</label>
        <select id="functionFilter" class="form-control" style="display:inline-block; width:auto;" onchange="filterEmployeeCreates()">
            <option value="all">Alle functies</option>
            @foreach (var functionName in Model.Select(e => e.MainFunction).Distinct())
            {
                <option value="@functionName">@functionName</option>
            }
        </select>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        
        <tr>
            <th>Medewerker</th>
            <div id="forecast-NoForecast" class="text-muted text-smaller"></div>
            @foreach (var day in Enum.GetValues(typeof(DayNameOfWeek)).Cast<DayNameOfWeek>())
            {
                <th>
                    <div>
                        <span>@day</span>
                        <br />
                        
                        @foreach (var department in Enum.GetValues(typeof(DepartmentEnum)).Cast<DepartmentEnum>())
                        {
                            <small id="forecast-@day-@department" class="text-muted text-smaller">@department: </small>
                            <small id="scheduled-@day-@department" class="text-muted text-smaller"></small>
                            <small id="difference-@day-@department" class="text-muted text-smaller"></small>
                            <br />
                        }
                    </div>
                </th>
            }
        </tr>
    </thead>
    <tbody id="employeeTableBody">
        @foreach (var employee in Model)
        {
            <tr class="employee-row" data-function="@employee.MainFunction">
                <td>
                    <strong>@employee.Name</strong>
                    <br />
                    <small>@employee.MainFunction</small>
                    <br />
                    <small class="total-hours">
                        Uren: <span id="total-hours-@employee.EmployeeId">0</span>
                    </small>
                </td>
                @foreach (var day in Enum.GetValues(typeof(DayNameOfWeek)).Cast<DayNameOfWeek>())
                {
                    <td class="schedule-cell" data-employee-id="@employee.EmployeeId">
                        <div id="schedule-container-@employee.EmployeeId-@day"></div>
                        <button class="btn btn-sm btn-primary" onclick="openScheduleModal(@employee.EmployeeId, '@day')">
                            +
                        </button>
                    </td>
                }
            </tr>
        }
    </tbody>
    
</table>
<div class="pagination-container">
    <button id="vorige" class="btn btn-secondary" onclick="changePage(-1)" disabled>Previous</button>
    <span id="pageInfo">Page 1</span>
    <button id="volgende" class="btn btn-secondary" onclick="changePage(1)">Next</button>
</div>
<!-- Modal -->
<div id="scheduleModal" class="modal" tabindex="-1" role="dialog" style="display: none;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Voeg een planning toe</h5>
                <button type="button" class="close" onclick="closeScheduleModal()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="scheduleForm">
                    <input type="hidden" id="modalEmployeeId">
                    <input type="hidden" id="modalDay">
                    <input type="hidden" id="modalDate">

                    <div class="form-group">
                        <label for="modalStartTime">Start tijd:</label>
                        <input type="time" id="modalStartTime" class="form-control" value="09:00">
                    </div>
                    <div class="form-group">
                        <label for="modalEndTime">Eind tijd:</label>
                        <input type="time" id="modalEndTime" class="form-control" value="21:00">
                    </div>
                    <div class="form-group">
                        <label for="modalDepartment">Afdeling:</label>
                        <select id="modalDepartment" class="form-control">
                            @foreach (var dept in Enum.GetValues(typeof(DepartmentEnum)))
                            {
                                <option value="@dept">@dept</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="Opslaan" class="btn btn-primary">Opslaan</button>
                <button type="button" class="btn btn-secondary" onclick="closeScheduleModal()">Annuleren</button>
            </div>
        </div>
    </div>
</div>
<div class="publish-container" style="position: fixed; bottom: 20px; right: 20px;">
    <button class="btn btn-primary" onclick="publishSchedules()">Publiseer</button>
</div>
@section Scripts {
    <script>

        
        function openScheduleModal(employeeId, day) {
            document.getElementById("modalEmployeeCreateId").value = employeeId;
            document.getElementById("modalDay").value = day;
            document.getElementById("modalStartTime").value = "09:00";
            document.getElementById("modalEndTime").value = "21:00";  
            document.getElementById("scheduleModal").style.display = "block";
        }

        function closeScheduleModal() {
            document.getElementById("scheduleModal").style.display = "none";
        }

        
        function parseTime(timeStr) {
            const timeParts = timeStr.split(":");
            const hours = parseInt(timeParts[0], 10);
            const minutes = parseInt(timeParts[1], 10);
            return new Date(0, 0, 0, hours, minutes);
        }

        function publishSchedules() {
            const modalDate = document.getElementById("modalDate").value;

            if (!modalDate) {
                alert("No date selected for publishing schedules.");
                return;
            }

            const publishData = {
                Date: modalDate
            };

            console.log("Publishing schedules for date:", publishData);

            
            $.ajax({
                url: '@Url.Action("PublishSchedules", "Scheduling")',
                type: 'POST',
                data: JSON.stringify(publishData),
                contentType: 'application/json',
                success: function (response) {
                    alert("Schedules published successfully.");
                    console.log("Response from server:", response);
                },
                error: function (xhr, status, error) {
                    console.error("Error publishing schedules:", status, error);
                    alert("Failed to publish schedules. Please try again.");
                }
            });
        }

        function removeSchedule(button) {
            const scheduleEntry = button.closest(".schedule-entry");

            console.log(scheduleEntry);

            const employeeIdInput = scheduleEntry.querySelector('input[name="employeeId"]');
            const dateInput = scheduleEntry.querySelector('input[name="date"]');
            const startTimeElement = scheduleEntry.querySelector(".startTime");
            const endTimeElement = scheduleEntry.querySelector(".endTime");
            const departmentElement = scheduleEntry.querySelector(".department");

            if (!employeeIdInput || !dateInput || !startTimeElement || !endTimeElement || !departmentElement) {
                console.error("Missing one or more required elements in the schedule entry");
                return;
            }

            const employeeId = employeeIdInput.value;
            const date = dateInput.value;
            const startTime = startTimeElement.textContent.trim();
            const endTime = endTimeElement.textContent.trim();
            const department = departmentElement.textContent.trim();

            console.log("Removing schedule:", { employeeId, date, startTime, endTime, department });

            const userConfirmed = confirm(`weet je zeker dat je deze wilt verwijderen? ${date} van ${startTime} tot ${endTime}?`);

            if (!userConfirmed) {
                console.log("Schedule removal canceled.");
                return; 
            }

            scheduleEntry.remove();

            const scheduleData = {
                EmployeeCreateId: parseInt(employeeId),
                Date: new Date(date).toISOString(),
                StartTime: startTime + ":00",
                EndTime: endTime + ":00",
                Department: department
            };
            
            fetch('/Scheduling/RemoveSchedule', {  
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(scheduleData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to remove schedule");
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("Schedule successfully removed from database");
                    } else {
                        console.error("Failed to remove schedule:", data);
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }


        function getWeekDates(year, week) {
            const jan1 = new Date(year, 0, 1);


            const jan1Day = jan1.getDay();

            const firstMonday = new Date(jan1);
            if (jan1Day !== 1) { 
                const offset = (jan1Day === 0 ? 1 : 8) - jan1Day;
                firstMonday.setDate(jan1.getDate() + offset);
            }

            const startDate = new Date(firstMonday);
            startDate.setDate(firstMonday.getDate() + (week - 1) * 7);

            const endDate = new Date(startDate);
            endDate.setDate(startDate.getDate() + 6);

            return { startDate, endDate };
        }
        

        document.addEventListener("DOMContentLoaded", function () {
            let currentDate = new Date();
            let currentYear = currentDate.getFullYear();

            function saveSchedule() {
                const dayMapping = { 'Maandag': 0, 'Dinsdag': 1, 'Woensdag': 2, 'Donderdag': 3, 'Vrijdag': 4, 'Zaterdag': 5, 'Zondag': 6 };

                const employeeId = document.getElementById("modalEmployeeCreateId").value;
                const day = document.getElementById("modalDay").value;

                const startTime = document.getElementById("modalStartTime").value;
                const endTime = document.getElementById("modalEndTime").value;
                const department = document.getElementById("modalDepartment").value;


                const start = parseTime(startTime);
                const end = parseTime(endTime);


                if (start >= end) {
                    alert("Eind tijd moet later zijn dan start tijd.");
                    return;
                }

                const baseDate = document.getElementById("modalDate").value;
                const dayOffset = dayMapping[day];
                const dateObj = new Date(baseDate);
                dateObj.setDate(dateObj.getDate() + dayOffset);

                updatedDate = dateObj.toISOString().split('T')[0];

                const scheduleEntry = {
                    EmployeeCreateId: parseInt(employeeId),
                    Day: day,
                    Date: new Date(updatedDate).toISOString(),
                    StartTime: startTime + ":00",
                    EndTime: endTime + ":00",
                    Department: department
                };


                console.log("Schedule Entry:", scheduleEntry);

                $.ajax({
                    url: '@Url.Action("AddSchedule", "Scheduling")',
                    type: 'POST',
                    data: JSON.stringify(scheduleEntry),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log("Response from server:", response);

                        if (response.success) {
                            refreshGrid();

                            closeScheduleModal();
                        } else {

                            console.error("Failed to save schedule:", response.message);
                            alert(`Failed to save the schedule: ${response.message}`);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error saving schedule:", status, error);
                        alert("An unexpected error occurred. Please try again.");
                    }
                });
            }
            function getCurrentWeek(date) {
                const jan1 = new Date(date.getFullYear(), 0, 1);
                const days = Math.floor((date - jan1) / (24 * 60 * 60 * 1000));
                return Math.ceil((days + jan1.getDay() + 1) / 7);
            }

            let currentWeek = getCurrentWeek(currentDate);

            function refreshGrid() {

                fetchSchedulesForWeek(currentYear, currentWeek);
            }

            function updateWeekRange() {
                const { startDate, endDate } = getWeekDates(currentYear, currentWeek);

                const rangeText = `Week ${currentWeek} of ${currentYear}: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;
                document.getElementById("weekRange").textContent = rangeText;

                document.getElementById("modalDate").value = startDate.toISOString().split('T')[0];

                console.log("ik kom hier update week range")
                console.log(`hier is de start datum: ${startDate.toISOString().split('T')[0]}`)
                refreshGrid();
            }

            
            function changeWeek(increment) {
                currentWeek += increment;

                if (currentWeek < 1) {
                    currentYear -= 1;
                    currentWeek = 52;
                } else if (currentWeek > 52) {
                    currentYear += 1;
                    currentWeek = 1;
                }

                updateWeekRange();
            }

            function fetchSchedulesForWeek(year, week) {

                $.ajax({
                    url: `@Url.Action("GetSchedulesForWeek", "Scheduling")?year=${year}&week=${week}`,
                    type: 'GET',
                    success: function (response) {

                        const schedules = response.schedules; 
                        const forecastData = response.forecasts;
                        const scheduledData = response.scheduledHours || [];
                        updateScheduleGrid(schedules);
                        updateForecastGrid(forecastData, scheduledData);
                        
                    },
                    error: function (xhr, status, error) {
                        alert("Failed to fetch schedules. Please try again.");
                    }
                });
            }


            function updateScheduleGrid(schedules) {
                const dayMapping = { 0: 'Zondag', 1: 'Maandag', 2: 'Dinsdag', 3: 'Woensdag', 4: 'Donderdag', 5: 'Vrijdag', 6: 'Zaterdag' };

                document.querySelectorAll('.schedule-cell div').forEach(cell => (cell.innerHTML = ''));

                const totalHoursPerEmployeeCreate = {};

                schedules.forEach(schedule => {
                    const dayOfWeek = new Date(schedule.date).getDay();

                    const dayName = dayMapping[dayOfWeek] || "unknown";

                    const containerId = `schedule-container-${schedule.employeeId}-${dayName}`;
                    const container = document.getElementById(containerId);

                    if (container) {
                        const scheduleElement = document.createElement("div");
                        scheduleElement.classList.add("schedule-entry");

                        const hiddenEmployeeCreateId = document.createElement("input");
                        hiddenEmployeeCreateId.type = "hidden";
                        hiddenEmployeeCreateId.name = "employeeId";
                        hiddenEmployeeCreateId.value = schedule.employeeId;

                        const hiddenDate = document.createElement("input");
                        hiddenDate.type = "hidden";
                        hiddenDate.name = "date";
                        hiddenDate.value = schedule.date;

                        const startTimeSpan = document.createElement("span");
                        startTimeSpan.classList.add("startTime");
                        startTimeSpan.textContent = schedule.startTime;

                        const endTimeSpan = document.createElement("span");
                        endTimeSpan.classList.add("endTime");
                        endTimeSpan.textContent = schedule.endTime;

                        const departmentSpan = document.createElement("span");
                        departmentSpan.classList.add("department");
                        departmentSpan.textContent = schedule.department;

                        scheduleElement.innerHTML = `
                        <span class="startTime">${schedule.startTime}</span> -
                        <span class="endTime">${schedule.endTime}</span>
                        (<span class="department">${schedule.department}</span>)
                        <button class="btn btn-sm btn-danger" onclick="removeSchedule(this)">X</button>
                        `;

                        scheduleElement.appendChild(hiddenEmployeeCreateId);
                        scheduleElement.appendChild(hiddenDate);
                        container.appendChild(scheduleElement);

                        const startTime = new Date(`1970-01-01T${schedule.startTime}:00`);
                        const endTime = new Date(`1970-01-01T${schedule.endTime}:00`);
                        const hoursWorked = (endTime - startTime) / (1000 * 60 * 60);

                        if (!totalHoursPerEmployeeCreate[schedule.employeeId]) {
                            totalHoursPerEmployeeCreate[schedule.employeeId] = 0;
                        }
                        totalHoursPerEmployeeCreate[schedule.employeeId] += hoursWorked;
                    }
                });

                document.querySelectorAll("[id^='total-hours-']").forEach(element => {
                    element.textContent = "00:00"; 
                });
                for (const [employeeId, totalHours] of Object.entries(totalHoursPerEmployeeCreate)) {
                    const totalHoursElement = document.getElementById(`total-hours-${employeeId}`);
                    if (totalHoursElement) {
                        const hours = Math.floor(totalHours);
                        const minutes = Math.round((totalHours - hours) * 60);
                        totalHoursElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                    }
                }

            }

            function updateForecastGrid(forecastData, scheduledData) {
                const dayMapping = {
                    0: 'Zondag',
                    1: 'Maandag',
                    2: 'Dinsdag',
                    3: 'Woensdag',
                    4: 'Donderdag',
                    5: 'Vrijdag',
                    6: 'Zaterdag'
                };

                
                function convertToHHMM(decimalHours) {
                    const hours = Math.floor(decimalHours);
                    const minutes = Math.round((decimalHours - hours) * 60);
                    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                }

                const scheduledMap = scheduledData.reduce((map, schedule) => {
                    const key = `${schedule.date}-${schedule.department}`;
                    map[key] = schedule.scheduledHours;
                    return map;
                }, {});


                document.querySelectorAll('.progress-bar-container').forEach(container => {
                    container.innerHTML = '';
                });
                var ForeCastAvail = false;
                forecastData.forEach(forecast => {
                    ForeCastAvail = true;
                    const dayOfWeek = new Date(forecast.date).getDay();
                    const dayName = dayMapping[dayOfWeek] || "unknown";

                    const scheduledKey = `${forecast.date}-${forecast.department}`;
                    const scheduledHours = scheduledMap[scheduledKey] || 0;

                    const progressPercentage = forecast.manHours
                        ? Math.min((scheduledHours / forecast.manHours) * 100, 100)
                        : 0;

                    const forecastElement = document.getElementById(`forecast-${dayName}-${forecast.department}`);
                    if (forecastElement) {
                        forecastElement.innerHTML = `
                <div class="progress-bar-container">
                    <div class="department-name">
                        <strong>${forecast.department}:</strong>
                    </div>
                    <div
                        class="progress progress-hover"
                        title="Ingepland: ${convertToHHMM(scheduledHours)} | Prognose: ${convertToHHMM(forecast.manHours)} | voortgang: ${progressPercentage.toFixed(1)}%"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top">
                        <div
                            class="progress-bar progress-bar-forecast"
                            role="progressbar"
                            style="width: ${progressPercentage}%;"
                        ></div>
                    </div>
                </div>
            `;
                       
                    }

                    const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                    tooltips.forEach(tooltip => {
                        new bootstrap.Tooltip(tooltip);
                    });
                });
                if (ForeCastAvail == false) {
                    const scheduledElement = document.getElementById(`forecast-NoForecast`);
                    if (scheduledElement) {

                        scheduledElement.innerHTML = `

                                                <div class="department-name">
                                                    <strong>Geen prognoses voor deze week beschikbaar</strong>
                                                </div>
                                                
                                        `;
                    }
                }
                else 
                {
                    const scheduledElement = document.getElementById(`forecast-NoForecast`);
                    if (scheduledElement) {

                        scheduledElement.innerHTML = '';
                    }

                }
                scheduledData.forEach(schedule => {
                    const dayOfWeek = new Date(schedule.date).getDay();
                    const dayName = dayMapping[dayOfWeek] || "unknown";

                    const forecast = forecastData.find(f =>
                        f.date === schedule.date && f.department === schedule.department);

                    if (!forecast) {
                        const scheduledElement = document.getElementById(`scheduled-${dayName}-${schedule.department}`);
                        if (scheduledElement) {
                            const progressPercentage = 0;
                            scheduledElement.innerHTML = `
                    <div class="progress-bar-container">
                        <div class="department-name">
                            <strong>${schedule.department}:</strong>
                        </div>
                        <div
                            class="progress progress-hover"
                            title="Ingepland: ${convertToHHMM(schedule.scheduledHours)} | geen prognose beschikbaar"
                            data-bs-toggle="tooltip"
                            data-bs-placement="top">
                            <div
                                class="progress-bar progress-bar-no-forecast"
                                role="progressbar"
                                style="width: ${progressPercentage}%;"
                            ></div>
                        </div>
                    </div>
                `;
                        }
                    }
                    const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                    tooltips.forEach(tooltip => {
                        new bootstrap.Tooltip(tooltip);
                    });
                });
            }


            document.getElementById("previousWeek").addEventListener("click", () => changeWeek(-1));
            document.getElementById("nextWeek").addEventListener("click", () => changeWeek(1));
            document.getElementById("Opslaan").addEventListener("click", () => saveSchedule());

            updateWeekRange();

            function filterEmployeeCreates() {
                const selectedFunction = document.getElementById('functionFilter').value.toLowerCase();
                const rows = document.querySelectorAll('.employee-row');

                rows.forEach(row => {
                    const employeeFunction = row.getAttribute('data-function').toLowerCase();
                    if (selectedFunction === 'all' || employeeFunction === selectedFunction) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            document.getElementById('functionFilter').addEventListener('change', filterEmployeeCreates);

            const rowsPerPage = 10; // Als je de hoeveelheid rijen van medewerkers wilt veranderen is dat hier
            let currentPage = 1;
            const employeeRows = Array.from(document.querySelectorAll('.employee-row'));

            function renderPage(page) {
                const totalRows = employeeRows.length;
                const totalPages = Math.ceil(totalRows / rowsPerPage);


                document.getElementById("vorige").disabled = page === 1;
                document.getElementById("volgende").disabled = page === totalPages;

                
                document.getElementById("pageInfo").textContent = `Page ${page} of ${totalPages}`;

                
                employeeRows.forEach((row, index) => {
                    if (index >= (page - 1) * rowsPerPage && index < page * rowsPerPage) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            }

            
            window.changePage = function (increment) {
                currentPage += increment;
                renderPage(currentPage);
            };

            renderPage(currentPage);
        });

    </script>
}

<style>
    .table {
        table-layout: fixed;
        width: 100%;
    }

        .table th, .table td {
            word-wrap: break-word; 
            overflow: hidden; 
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: top;
            padding: 10px;
            text-align: center; 
        }

    .schedule-cell {
        position: relative;
        height: auto; 
        min-height: 60px; 
        overflow-y: auto;
        text-align: left; 
    }

    .schedule-entry {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 3px;
        margin-bottom: 5px;
        padding: 5px;
        font-size: 0.75em;
        max-width: 100%;
    }

        .schedule-entry button {
            flex-shrink: 0;
            font-size: 0.8em;
            margin-left: 5px;
        }

        .schedule-entry span {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: calc(100% - 40px);
        }

    .schedule-cell::-webkit-scrollbar {
        width: 8px;
    }

    .schedule-cell::-webkit-scrollbar-thumb {
        background: #bbb;
        border-radius: 4px;
    }

    .text-smaller {
        font-size: 0.6em;
        line-height: 0.0;
    }

        .schedule-cell::-webkit-scrollbar-thumb:hover {
            background: #999;
        }

    .progress {
        height: 15px; 
        background-color: #f0f0f0;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1px; 
    }

    .progress-bar {
        height: 100%;
        text-align: center;

        line-height: 20px;
        color: white;
        transition: width 0.3s ease; 
    }


    .progress-bar-forecast {
        background-color: #007bff;
    }


    .progress-bar-no-forecast {
        background-color: #dc3545;
    }


    .department-name {
        margin-bottom: 8px;
    }
</style>

