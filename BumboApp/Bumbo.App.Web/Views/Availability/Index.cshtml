@using Bumbo.Domain.Models;
@using Bumbo.App.Web.Models.ViewModels.Availability;

@model WeekAvailabilityViewModel;

<h1 class="text-center mb-4">Beschikbaarheid</h1>

<div class="container mt-5">
    <!-- Filterformulier -->
    <form method="get" class="mb-4">
        <input type="hidden" name="branchId" value="@Model.BranchId" />
        <label for="positionFilter">Filter op positie:</label>
        <select id="positionFilter" name="position" class="form-control" style="width: 200px; display: inline-block;">
            <option value="">-- Alle posities --</option>
            <option value="Manager">Manager</option>
            <option value="Caissière">Caissière</option>
            <option value="Vakkenvuller">Vakkenvuller</option>
        </select>
        <button type="submit" class="btn btn-primary">Filter</button>
    </form>
    <!-- Beschikbaarheidsgegevens en Weekoverzicht in Flex-container -->
    <div style="display: flex; gap: 20px; justify-content: space-between;">
        <!-- Personeels Beschikbaarheid Tabel -->
        <div style="flex: 1;">
            <table class="table table-bordered table-striped text-center">
                <thead class="thead-dark">
                    <tr>
                        <th>Personeel</th>
                        <th>Positie</th>
                        <th>Dag</th>
                        <th>Beschikbaarheid</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dayAvailability in Model.DayAvailabilities)
                    {
                        bool hasEmployeeAvailability = dayAvailability.EmployeeAvailabilities != null && dayAvailability.EmployeeAvailabilities.Any();

                        // Controleer of er voor de hele week geen personeel beschikbaar is
                        if (hasEmployeeAvailability)
                        {
                            // Als er personeel beschikbaar is, toon de gegevens
                            foreach (var employeeAvailability in dayAvailability.EmployeeAvailabilities)
                            {
                                <tr>
                                    <td>@employeeAvailability.EmployeeCreate.FirstName @employeeAvailability.EmployeeCreate.LastName</td>
                                    <td>@employeeAvailability.EmployeeCreate.Position</td>
                                    <td>@dayAvailability.WeekDay.ToString("dddd")</td>
                                    <td>
                                        @employeeAvailability.StartTime?.ToString(@"hh\:mm") - @employeeAvailability.EndTime?.ToString(@"hh\:mm")
                                    </td>
                                </tr>
                            }
                        }
                    }

                    @if (Model.DayAvailabilities.All(d => d.EmployeeAvailabilities == null || !d.EmployeeAvailabilities.Any()))
                    {
                        <tr>
                            <td colspan="4" class="text-center">Geen personeel beschikbaar voor de week</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Weekoverzicht Tabel -->
        <div style="flex: 1;">
            <form method="post" asp-action="Availability">
                <table class="table table-bordered table-striped text-center week-overview">
                    <thead class="thead-dark">
                        <tr>
                            <th>Dag</th>
                            <th>Openingstijd - Sluitingstijd</th>
                            <th class="planning-column">Planning</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < 7; i++)
                        {
                            var currentDay = Model.DayAvailabilities.FirstOrDefault(d => d.WeekDay == Model.FirstDayOfWeek.AddDays(i));
                            var openingTime = Model.OpeningDurations?.OpeningTimes.FirstOrDefault(o => o.BranchId == Model.BranchId && o.StartTime.HasValue && o.EndTime.HasValue && o.Day == currentDay?.WeekDay);

                            <tr>
                                <td>@Model.FirstDayOfWeek.AddDays(i).ToString("dddd")</td>
                                <td>@openingTime?.StartTime?.ToString(@"HH:mm") - @openingTime?.EndTime?.ToString(@"HH:mm")</td>
                                <td>
                                    <div class="time-slot">
                                        @if (currentDay != null)
                                        {
                                            var filteredEmployees = currentDay.EmployeeAvailabilities;

                                            foreach (var employeeAvailability in filteredEmployees)
                                            {
                                                var startLeft = 0;
                                                var width = 0;

                                                if (employeeAvailability.StartTime.HasValue && employeeAvailability.EndTime.HasValue && openingTime?.StartTime.HasValue == true)
                                                {
                                                    var startTimeSpan = employeeAvailability.StartTime.Value.ToTimeSpan();
                                                    var endTimeSpan = employeeAvailability.EndTime.Value.ToTimeSpan();
                                                    var branchStartTimeSpan = openingTime.StartTime.Value.ToTimeSpan();
                                                    var branchEndTimeSpan = openingTime.EndTime.Value.ToTimeSpan();

                                                    var totalDayDuration = (branchEndTimeSpan - branchStartTimeSpan).TotalMinutes;

                                                    startLeft = (int)((startTimeSpan - branchStartTimeSpan).TotalMinutes / totalDayDuration * 100);
                                                    var workDuration = (endTimeSpan - startTimeSpan).TotalMinutes;
                                                    width = (int)((workDuration) / totalDayDuration * 100);
                                                }

                                                <div class="work-block" style="left: @startLeft%; width: @width%;">
                                                    @employeeAvailability.EmployeeCreate.FirstName @employeeAvailability.EmployeeCreate.LastName
                                                </div>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </form>
        </div>
    </div>
</div>

<style>
    .week-overview {
        width: 100%;
    }

    .time-slot {
        position: relative;
        height: 60px;
        background-color: #f5f5f5;
        border: 1px solid #ddd;
    }

    .work-block {
        position: absolute;
        height: 100%;
        border: 1px solid black;
        background-color: #ccc;
        color: black;
        font-weight: bold;
        text-align: center;
        line-height: 60px;
        overflow: hidden;
    }

    .planning-column {
        width: 300px;
    }
</style>

<script>
    // Verkrijg de waarde van 'position' uit de URL querystring
    const urlParams = new URLSearchParams(window.location.search);
    const selectedPosition = urlParams.get('position');

    // Verkrijg de select element
    const positionSelect = document.getElementById('positionFilter');

    // Als er een geselecteerde waarde is, stel deze dan in als geselecteerd
    if (selectedPosition) {
        positionSelect.value = selectedPosition;
    }
</script>