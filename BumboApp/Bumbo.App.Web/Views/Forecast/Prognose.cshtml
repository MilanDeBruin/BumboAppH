@using Bumbo.App.Web.Models.ViewModels
@using Bumbo.Functionality.Forecasts
@using Bumbo.Data.Models;
@using System.Globalization

@model DayForecast
@{
    int currentWeek = ViewBag.SelectedWeek;
    int year = ViewBag.CurrentYear;
    var forecast = ViewBag.WeekForecast;

    List<DayForecast> dayForecasts = new List<DayForecast>();
    foreach (var item in forecast.WeekList)
    {
        dayForecasts.Add(item);
    }

    DateOnly firstDayOfWeek = FirstDateOfWeek(currentWeek, year);
}

<h2>Prognose</h2>

<div style="display: flex; justify-content: space-between; align-items: center; padding: 20px;">
    <form method="get" action="@Url.Action("GeneratePrognose", "Forecast")">
        <input type="hidden" name="weekNumber" value="@currentWeek" />
        <input type="hidden" name="year" value="@year" />
        <button type="submit" class="btn btn-primary">Prognose invullen</button>
    </form>
    <div style="display: flex; align-items: center; gap: 20px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
        <form method="get" action="@Url.Action("Prognose", "Home")" style="display: flex; align-items: center;">
            @* Week Minder knop *@
            <input type="hidden" name="weekNumber" value="@(currentWeek > 1 ? currentWeek - 1 : 52)" />
            <button type="submit" class="btn btn-secondary">Vorige week</button>
        </form>

        <span>Week: @currentWeek</span>

        <span>Jaar: @year</span>

        <form method="get" action="@Url.Action("Prognose", "Home")" style="display: flex; align-items: center;">
            @* Week Meer knop *@
            <input type="hidden" name="weekNumber" value="@(currentWeek < 52 ? currentWeek + 1 : 1)" />
            <button type="submit" class="btn btn-secondary">Volgende week</button>
        </form>
    </div>
    <div></div>

</div>

<table style="width: 100%; border-collapse: collapse;">
    <tr>
        <th style="border: 1px solid #ccc; padding: 10px;">Dag</th>
        <th style="border: 1px solid #ccc; padding: 10px;">Vers</th>
        <th style="border: 1px solid #ccc; padding: 10px;">Kassa</th>
        <th style="border: 1px solid #ccc; padding: 10px;">DKW</th>
    </tr>
    @for (int i = 0; i < 7; i++)
    {
        DateOnly currentDate = firstDayOfWeek.AddDays(i);
        CultureInfo dutchCulture = new CultureInfo("nl-NL");
        string dagAfkorting = currentDate.ToString("ddd", dutchCulture);
        string dagAfkortingMetHoofdletter = char.ToUpper(dagAfkorting[0]) + dagAfkorting.Substring(1);

        <tr>
            <td style="border: 1px solid #ccc; padding: 10px;">@dagAfkortingMetHoofdletter</td>
            <td style="border: 1px solid #ccc; padding: 10px;">Aantal uur: @GetHoursForDepartment(dayForecasts, currentDate, "Vers")</td>
            <td style="border: 1px solid #ccc; padding: 10px;">Aantal uur: @GetHoursForDepartment(dayForecasts, currentDate, "Kassa")</td>
            <td style="border: 1px solid #ccc; padding: 10px;">Aantal uur: @GetHoursForDepartment(dayForecasts, currentDate, "Shelf")</td>
        </tr>
    }
</table>
@functions {
    private DateOnly FirstDateOfWeek(int weekNumber, int year)
    {
        var jan1 = new DateOnly(year, 1, 1);
        var daysOffset = DayOfWeek.Monday - jan1.DayOfWeek;
        var firstMonday = jan1.AddDays(daysOffset >= 0 ? daysOffset : daysOffset + 7);
        return firstMonday.AddDays((weekNumber - 1) * 7);
    }

    private string GetHoursForDepartment(List<DayForecast> forecasts, DateOnly date, string department)
    {

        DayForecast? currentDay = forecasts.FirstOrDefault(x => x.Date == date);
        if (currentDay == null)
        {
            return "0";
        }

        Forecast? forecast = currentDay.forecasts.FirstOrDefault(x => x.Department == department);
        if (forecast == null)
        {
            return "0";

        }

        return forecast!.ManHours.ToString("0");
    }

}
