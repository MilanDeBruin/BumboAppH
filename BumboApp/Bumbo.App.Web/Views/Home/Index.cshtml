@using Bumbo.Domain.Models;
@using Bumbo.App.Web.Models.ViewModels.Home;


@model Bumbo.App.Web.Models.ViewModels.Home.WeekPersonalScheduleViewModel

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/rooster_bekijken.css">
</head>

<body>
    <div>
        
        @if (!Model.isSick)
        {
            <a asp-controller="Home" asp-action="Ziekmelden">
                <input type="button" value="Ziekmelden"/>
            </a>
        }
        else
        {
            <a asp-controller="Home" asp-action="Ziekmelden">
                <input type="button" value="Ziekgemeld" disabled="disabled" class="disable_button"/>
            </a>
        }
        <h2>Rooster Week</h2>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success text-center mt-3">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="d-flex align-items-center gap-3 border p-3 rounded shadow-sm">
        <a asp-controller="Home"    
           asp-action="Index"
           asp-route-firstDayOfWeek="@Model.FirstDayOfWeek.AddDays(-7).ToString("yyyy-MM-dd")"
           class="btn btn-secondary">
            Week terug
        </a>

        <span class="fw-bold">@Model.FirstDayOfWeek.ToString("dd-MM-yyyy")</span>
        <span>tot</span>
        <span class="fw-bold">@Model.FirstDayOfWeek.AddDays(6).ToString("dd-MM-yyyy")</span>

        <a asp-controller="Home"
           asp-action="Index"
           asp-route-firstDayOfWeek="@Model.FirstDayOfWeek.AddDays(7).ToString("yyyy-MM-dd")"
           class="btn btn-secondary">
            Week vooruit
        </a>
    </div>

    <div class="table-container">
        @{
            // Ensure we always have 7 blocks, one for each day of the week
            var daysOfWeek = Enumerable.Range(0, 7).Select(i => DateOnly.FromDateTime(DateTime.Today).AddDays(i)).ToList();
        }

        <table class="schedule-table">
            <thead>
                <tr>
                    <th>Datum</th>
                    <th>Tijd</th>
                    <th>Afdeling</th>
                    <th>Filiaal</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var day in daysOfWeek)
                {
                    // Find matching WorkDay for the current day
                    var shiftsForDay = Model.WorkDays.Where(w => w.date == day).ToList();

                    if (shiftsForDay.Any())
                    {
                        foreach (var shift in shiftsForDay)
                        {
                            <tr>
                                <td>@day.ToString("yyyy-MM-dd")</td>
                                <td>@(shift != null ? $"{shift.StartTime:hh\\:mm} - {shift.endTime:hh\\:mm}" : "")</td>
                                <td>@(shift?.Departement ?? "N/A")</td>
                                <td>@(shift?.Branch_Id > 0 ? shift.Branch_Id.ToString() : "N/A")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>@day.ToString("yyyy-MM-dd")</td>
                            <td colspan="3" class="no-shifts">Geen shifts beschikbaar</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>



</body>
